# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import Reddit_pb2 as Reddit__pb2


class RedditServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreatePost = channel.unary_unary(
                '/Reddit.RedditService/CreatePost',
                request_serializer=Reddit__pb2.Post.SerializeToString,
                response_deserializer=Reddit__pb2.Post.FromString,
                )
        self.UpvotePost = channel.unary_unary(
                '/Reddit.RedditService/UpvotePost',
                request_serializer=Reddit__pb2.PostRequest.SerializeToString,
                response_deserializer=Reddit__pb2.Post.FromString,
                )
        self.DownvotePost = channel.unary_unary(
                '/Reddit.RedditService/DownvotePost',
                request_serializer=Reddit__pb2.PostRequest.SerializeToString,
                response_deserializer=Reddit__pb2.Post.FromString,
                )
        self.GetPostContent = channel.unary_unary(
                '/Reddit.RedditService/GetPostContent',
                request_serializer=Reddit__pb2.PostRequest.SerializeToString,
                response_deserializer=Reddit__pb2.Post.FromString,
                )
        self.CreateComment = channel.unary_unary(
                '/Reddit.RedditService/CreateComment',
                request_serializer=Reddit__pb2.Comment.SerializeToString,
                response_deserializer=Reddit__pb2.Comment.FromString,
                )
        self.UpvoteComment = channel.unary_unary(
                '/Reddit.RedditService/UpvoteComment',
                request_serializer=Reddit__pb2.CommentRequest.SerializeToString,
                response_deserializer=Reddit__pb2.Comment.FromString,
                )
        self.DownvoteComment = channel.unary_unary(
                '/Reddit.RedditService/DownvoteComment',
                request_serializer=Reddit__pb2.CommentRequest.SerializeToString,
                response_deserializer=Reddit__pb2.Comment.FromString,
                )
        self.GetNMostComment = channel.unary_unary(
                '/Reddit.RedditService/GetNMostComment',
                request_serializer=Reddit__pb2.GetNMostRequest.SerializeToString,
                response_deserializer=Reddit__pb2.GetNMostResponse.FromString,
                )
        self.ExpandCommentBranch = channel.unary_unary(
                '/Reddit.RedditService/ExpandCommentBranch',
                request_serializer=Reddit__pb2.ExpandCommentRequest.SerializeToString,
                response_deserializer=Reddit__pb2.ExpandCommentResponse.FromString,
                )
        self.MonitorUpdate = channel.stream_stream(
                '/Reddit.RedditService/MonitorUpdate',
                request_serializer=Reddit__pb2.MonitorUpdateRequest.SerializeToString,
                response_deserializer=Reddit__pb2.MonitorUpdateResponse.FromString,
                )


class RedditServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreatePost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpvotePost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownvotePost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPostContent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateComment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpvoteComment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownvoteComment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNMostComment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExpandCommentBranch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MonitorUpdate(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RedditServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreatePost': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePost,
                    request_deserializer=Reddit__pb2.Post.FromString,
                    response_serializer=Reddit__pb2.Post.SerializeToString,
            ),
            'UpvotePost': grpc.unary_unary_rpc_method_handler(
                    servicer.UpvotePost,
                    request_deserializer=Reddit__pb2.PostRequest.FromString,
                    response_serializer=Reddit__pb2.Post.SerializeToString,
            ),
            'DownvotePost': grpc.unary_unary_rpc_method_handler(
                    servicer.DownvotePost,
                    request_deserializer=Reddit__pb2.PostRequest.FromString,
                    response_serializer=Reddit__pb2.Post.SerializeToString,
            ),
            'GetPostContent': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPostContent,
                    request_deserializer=Reddit__pb2.PostRequest.FromString,
                    response_serializer=Reddit__pb2.Post.SerializeToString,
            ),
            'CreateComment': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateComment,
                    request_deserializer=Reddit__pb2.Comment.FromString,
                    response_serializer=Reddit__pb2.Comment.SerializeToString,
            ),
            'UpvoteComment': grpc.unary_unary_rpc_method_handler(
                    servicer.UpvoteComment,
                    request_deserializer=Reddit__pb2.CommentRequest.FromString,
                    response_serializer=Reddit__pb2.Comment.SerializeToString,
            ),
            'DownvoteComment': grpc.unary_unary_rpc_method_handler(
                    servicer.DownvoteComment,
                    request_deserializer=Reddit__pb2.CommentRequest.FromString,
                    response_serializer=Reddit__pb2.Comment.SerializeToString,
            ),
            'GetNMostComment': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNMostComment,
                    request_deserializer=Reddit__pb2.GetNMostRequest.FromString,
                    response_serializer=Reddit__pb2.GetNMostResponse.SerializeToString,
            ),
            'ExpandCommentBranch': grpc.unary_unary_rpc_method_handler(
                    servicer.ExpandCommentBranch,
                    request_deserializer=Reddit__pb2.ExpandCommentRequest.FromString,
                    response_serializer=Reddit__pb2.ExpandCommentResponse.SerializeToString,
            ),
            'MonitorUpdate': grpc.stream_stream_rpc_method_handler(
                    servicer.MonitorUpdate,
                    request_deserializer=Reddit__pb2.MonitorUpdateRequest.FromString,
                    response_serializer=Reddit__pb2.MonitorUpdateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Reddit.RedditService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RedditService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreatePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reddit.RedditService/CreatePost',
            Reddit__pb2.Post.SerializeToString,
            Reddit__pb2.Post.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpvotePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reddit.RedditService/UpvotePost',
            Reddit__pb2.PostRequest.SerializeToString,
            Reddit__pb2.Post.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DownvotePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reddit.RedditService/DownvotePost',
            Reddit__pb2.PostRequest.SerializeToString,
            Reddit__pb2.Post.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPostContent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reddit.RedditService/GetPostContent',
            Reddit__pb2.PostRequest.SerializeToString,
            Reddit__pb2.Post.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reddit.RedditService/CreateComment',
            Reddit__pb2.Comment.SerializeToString,
            Reddit__pb2.Comment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpvoteComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reddit.RedditService/UpvoteComment',
            Reddit__pb2.CommentRequest.SerializeToString,
            Reddit__pb2.Comment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DownvoteComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reddit.RedditService/DownvoteComment',
            Reddit__pb2.CommentRequest.SerializeToString,
            Reddit__pb2.Comment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNMostComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reddit.RedditService/GetNMostComment',
            Reddit__pb2.GetNMostRequest.SerializeToString,
            Reddit__pb2.GetNMostResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExpandCommentBranch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reddit.RedditService/ExpandCommentBranch',
            Reddit__pb2.ExpandCommentRequest.SerializeToString,
            Reddit__pb2.ExpandCommentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MonitorUpdate(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/Reddit.RedditService/MonitorUpdate',
            Reddit__pb2.MonitorUpdateRequest.SerializeToString,
            Reddit__pb2.MonitorUpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
